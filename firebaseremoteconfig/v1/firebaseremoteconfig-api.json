{
  "resources": {
    "projects": {
      "methods": {
        "updateRemoteConfig": {
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "path": "v1/{+project}/remoteConfig",
          "id": "firebaseremoteconfig.projects.updateRemoteConfig",
          "flatPath": "v1/projects/{projectsId}/remoteConfig",
          "parameterOrder": [
            "project"
          ],
          "description": "Publish a project's Remote Config template. Pass the ETag returned by GetRemoteConfig as an `If-Match` header to ensure the last seen Remote Config template is the one being overwritten by this update. Pass `If-Match: *` to force an update, regardless of the current version. Returns the published RemoteConfig and the updated ETag as a response header if successful, or an error. See the publishing guide for a list of [error codes](/docs/remote-config/use-config-rest#step_5_publish_json_data_to_replace_data_in_the_service).",
          "parameters": {
            "project": {
              "description": "Required. The Firebase project's Project ID or Project Number, prefixed with \"projects/\".",
              "required": true,
              "pattern": "^projects/[^/]+$",
              "type": "string",
              "location": "path"
            },
            "validateOnly": {
              "location": "query",
              "type": "boolean",
              "description": "Optional. Defaults to `false`. If `true`, the server will only attempt to validate the RemoteConfig. If validation succeeds, the RemoteConfig is not written to the Remote Config server, instead a `200 OK` response is returned. If validation fails, a validation error is returned. Note: other errors may still occur after this boolean is set to `false`, even if getting a `200 OK` when calling with UpdateRemoteConfig with `validate_only` set to `true`."
            }
          },
          "response": {
            "$ref": "RemoteConfig"
          },
          "httpMethod": "PUT",
          "request": {
            "$ref": "RemoteConfig"
          }
        },
        "getRemoteConfig": {
          "id": "firebaseremoteconfig.projects.getRemoteConfig",
          "flatPath": "v1/projects/{projectsId}/remoteConfig",
          "response": {
            "$ref": "RemoteConfig"
          },
          "httpMethod": "GET",
          "path": "v1/{+project}/remoteConfig",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "parameters": {
            "versionNumber": {
              "description": "Optional. Version number of the RemoteConfig to look up. If not specified, the latest RemoteConfig will be returned.",
              "format": "int64",
              "type": "string",
              "location": "query"
            },
            "project": {
              "location": "path",
              "description": "Required. The Firebase project's Project ID or Project Number, prefixed with \"projects/\".",
              "type": "string",
              "required": true,
              "pattern": "^projects/[^/]+$"
            }
          },
          "description": "Get a project's Remote Config template and associated ETag header. Returns the requested RemoteConfig as the payload and an ETag as a response header.",
          "parameterOrder": [
            "project"
          ]
        }
      },
      "resources": {
        "namespaces": {
          "methods": {
            "getServerRemoteConfig": {
              "flatPath": "v1/projects/{projectsId}/namespaces/{namespacesId}/serverRemoteConfig",
              "description": "Get a project's server-side Remote Config template. Note that this request proto is structured differently from other request messages in this proto, however this is consistent and compliant with the new API guidance (https://google.aip.dev/122#fields-representing-resource-names) and the standard going forward.",
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameters": {
                "name": {
                  "type": "string",
                  "description": "Required. The name of the template to get. Format: projects/{project}/namespaces/{namespace}/serverRemoteConfig Project is a Firebase project ID or project number. Namespace is the namespace ID (e.g.: firebase-server)",
                  "pattern": "^projects/[^/]+/namespaces/[^/]+/serverRemoteConfig$",
                  "required": true,
                  "location": "path"
                }
              },
              "response": {
                "$ref": "ServerRemoteConfig"
              },
              "id": "firebaseremoteconfig.projects.namespaces.getServerRemoteConfig",
              "parameterOrder": [
                "name"
              ],
              "path": "v1/{+name}"
            },
            "fetch": {
              "response": {
                "$ref": "FetchRemoteConfigResponse"
              },
              "httpMethod": "POST",
              "path": "v1/projects/{project}/namespaces/{namespace}:fetch",
              "request": {
                "$ref": "FetchRemoteConfigRequest"
              },
              "parameters": {
                "project": {
                  "description": "Required. The Firebase project ID or project number. (NOTE: These identifiers can be retrieved from the Firebase console.)",
                  "required": true,
                  "type": "string",
                  "location": "path"
                },
                "namespace": {
                  "required": true,
                  "description": "Required. The string \"firebase\".",
                  "location": "path",
                  "type": "string"
                }
              },
              "flatPath": "v1/projects/{project}/namespaces/{namespace}:fetch",
              "parameterOrder": [
                "project",
                "namespace"
              ],
              "description": "Fetch parameter values and any Firebase A/B Testing experiment information for the calling device. An ETag header is also returned. Pass the ETag in future requests via the `If-None-Match` header to save bandwidth. NOTE: The Fetch REST API requires an Instance ID to be populated in the request. The Instance ID can obtained from the IID SDK. See https://firebase.google.com/docs/reference/android/com/google/firebase/iid/FirebaseInstanceId and https://firebase.google.com/docs/reference/ios/firebaseinstanceid/api/reference/Classes/FIRInstanceID",
              "id": "firebaseremoteconfig.projects.namespaces.fetch"
            }
          }
        },
        "remoteConfig": {
          "methods": {
            "rollback": {
              "request": {
                "$ref": "RollbackRemoteConfigRequest"
              },
              "id": "firebaseremoteconfig.projects.remoteConfig.rollback",
              "httpMethod": "POST",
              "path": "v1/{+project}/remoteConfig:rollback",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "response": {
                "$ref": "RemoteConfig"
              },
              "parameters": {
                "project": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "Required. The Firebase project's Project ID or Project Number, prefixed with \"projects/\".",
                  "pattern": "^projects/[^/]+$"
                }
              },
              "flatPath": "v1/projects/{projectsId}/remoteConfig:rollback",
              "description": "Roll back a project's published Remote Config template to the one specified by the provided version number. A rollback is equivalent to getting a previously published Remote Config template, and re-publishing it using a force update. Returns the published RemoteConfig and the updated ETag as a response header if successful, or an error. See the publishing guide for a list of [error codes](/docs/remote-config/use-config-rest#step_5_publish_json_data_to_replace_data_in_the_service). In particular, note that the method returns an error with HTTP Status 404 if the requested version_number to rollback to is not found.",
              "parameterOrder": [
                "project"
              ]
            },
            "listVersions": {
              "response": {
                "$ref": "ListVersionsResponse"
              },
              "description": "Get a list of Remote Config template versions that have been published, sorted in reverse chronological order. Only the last 300 versions are stored. All versions that correspond to non-active Remote Config templates (i.e., all except the template that is being fetched by clients) are also deleted if they are older than 90 days.",
              "id": "firebaseremoteconfig.projects.remoteConfig.listVersions",
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameterOrder": [
                "project"
              ],
              "parameters": {
                "pageToken": {
                  "description": "Optional. The next_page_token value returned from a previous List request, if any.",
                  "type": "string",
                  "location": "query"
                },
                "project": {
                  "description": "Required. The Firebase project's Project ID or Project Number, prefixed with \"projects/\".",
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "pattern": "^projects/[^/]+$"
                },
                "pageSize": {
                  "description": "Optional. The maximum number of items to return per page.",
                  "format": "int32",
                  "type": "integer",
                  "location": "query"
                },
                "startTime": {
                  "format": "google-datetime",
                  "location": "query",
                  "description": "Optional. Specify the earliest update time to include in the results; any entries updated before this time are omitted.",
                  "type": "string"
                },
                "endTime": {
                  "description": "Optional. Specify the latest update time to include in the results; any entries updated on or after this time are omitted.",
                  "location": "query",
                  "format": "google-datetime",
                  "type": "string"
                },
                "endVersionNumber": {
                  "description": "Optional. Specify the newest version number to include in the results. If specified, must be greater than zero. Defaults to the newest version.",
                  "location": "query",
                  "type": "string",
                  "format": "int64"
                }
              },
              "flatPath": "v1/projects/{projectsId}/remoteConfig:listVersions",
              "path": "v1/{+project}/remoteConfig:listVersions"
            },
            "downloadDefaults": {
              "description": "Get a project's current Remote Config template parameters and default values in JSON, property list (plist), or XML format.",
              "id": "firebaseremoteconfig.projects.remoteConfig.downloadDefaults",
              "response": {
                "$ref": "HttpBody"
              },
              "flatPath": "v1/projects/{projectsId}/remoteConfig:downloadDefaults",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "httpMethod": "GET",
              "path": "v1/{+project}/remoteConfig:downloadDefaults",
              "parameters": {
                "format": {
                  "enum": [
                    "FORMAT_UNSPECIFIED",
                    "XML",
                    "PLIST",
                    "JSON"
                  ],
                  "type": "string",
                  "location": "query",
                  "description": "Required. The file structure to return.",
                  "enumDescriptions": [
                    "Catch-all for unrecognized enum values.",
                    "Returns a response in XML format.",
                    "Returns a response in property list (plist) format.",
                    "Returns a response in raw JSON format (not packaged in an HttpBody object)."
                  ]
                },
                "project": {
                  "description": "Required. The Firebase project's Project ID or Project Number, prefixed with \"projects/\".",
                  "pattern": "^projects/[^/]+$",
                  "required": true,
                  "type": "string",
                  "location": "path"
                }
              },
              "parameterOrder": [
                "project"
              ]
            }
          }
        }
      }
    }
  },
  "id": "firebaseremoteconfig:v1",
  "schemas": {
    "ServerRemoteConfigCondition": {
      "properties": {
        "condition": {
          "description": "Required. The logic of this condition.",
          "$ref": "Condition"
        },
        "name": {
          "type": "string",
          "description": "Required. A non-empty and unique name of this condition."
        }
      },
      "description": "A condition targeting a specific group of users and servers. Same as the condition in the control plane.",
      "id": "ServerRemoteConfigCondition",
      "type": "object"
    },
    "ServerRemoteConfigParameterValue": {
      "type": "object",
      "id": "ServerRemoteConfigParameterValue",
      "description": "A ServerRemoteConfigParameterValue resource contains the value that a parameter may have. Currently, there is no support for managed values like ABT or P13n.",
      "properties": {
        "useInAppDefault": {
          "description": "If true, the parameter is omitted from the parameter values returned to the server.",
          "type": "boolean"
        },
        "value": {
          "type": "string",
          "description": "The string value that the parameter is set to."
        }
      }
    },
    "MicroPercentRange": {
      "description": "A micro-percent interval defined by lower and upper bounds.",
      "type": "object",
      "properties": {
        "microPercentLowerBound": {
          "format": "int32",
          "type": "integer",
          "description": "The lower limit of percentiles to target in micro-percents. The value must be in the range [0 and 100000000]."
        },
        "microPercentUpperBound": {
          "description": "The upper limit of percentiles to target in micro-percents. The value must be in the range [0 and 100000000].",
          "type": "integer",
          "format": "int32"
        }
      },
      "id": "MicroPercentRange"
    },
    "RemoteConfigParameterGroup": {
      "type": "object",
      "properties": {
        "description": {
          "description": "Optional. A description for the group. Its length must be less than or equal to 256 characters. A description may contain any Unicode characters.",
          "type": "string"
        },
        "parameters": {
          "description": "Map of parameter keys to their optional default values and optional conditional values for parameters that belong to this group. A parameter only appears once per RemoteConfig: an ungrouped parameter appears at the top level; a parameter organized within a group appears within its group's map of parameters.",
          "type": "object",
          "additionalProperties": {
            "$ref": "RemoteConfigParameter"
          }
        }
      },
      "id": "RemoteConfigParameterGroup",
      "description": "A named group of parameters. Grouping parameters is only for management purposes and does not affect client-side fetching of parameter values."
    },
    "PersonalizationMetadata": {
      "properties": {
        "armIndex": {
          "format": "int32",
          "description": "The selected arm's index, which may be 0.",
          "type": "integer"
        },
        "personalizationId": {
          "description": "The ID of this Personalization experiment. Should be composed of letters, numbers, hyphens, and underscores.",
          "type": "string"
        },
        "choiceId": {
          "description": "Identifier for the choice. For internal use only.",
          "type": "string"
        },
        "group": {
          "description": "Variant group to which user belongs.",
          "enum": [
            "GROUP_UNSPECIFIED",
            "BASELINE",
            "P13N"
          ],
          "enumDescriptions": [
            "Default value.",
            "Audience we put aside for baseline quality measurement and comparison.",
            "Audience to which personalized experiences are being rolled out."
          ],
          "type": "string"
        }
      },
      "type": "object",
      "description": "LINT.IfChange Metadata associated with a particular Remote Config parameter key, managed by Firebase Personalization.",
      "id": "PersonalizationMetadata"
    },
    "RemoteConfig": {
      "type": "object",
      "id": "RemoteConfig",
      "properties": {
        "conditions": {
          "description": "A list of conditions in descending order by priority. The values of the google.firebase.remoteconfig.v1.RemoteConfigCondition.name entries must be unique.",
          "type": "array",
          "items": {
            "$ref": "RemoteConfigCondition"
          }
        },
        "parameters": {
          "type": "object",
          "additionalProperties": {
            "$ref": "RemoteConfigParameter"
          },
          "description": "Map of parameter keys to their optional default values and optional conditional values."
        },
        "version": {
          "$ref": "Version",
          "description": "Output only, except for the version description. Metadata associated with a particular version of a template. A version's description field may be specified in UpdateRemoteConfig calls."
        },
        "parameterGroups": {
          "description": "Map of parameter group names to their descriptions and grouped parameters. A group's name is mutable but must be unique among groups in the config. The name is limited to 256 characters and intended to be human-readable. Any Unicode characters are allowed. Groups have a list of parameters which allows users of the API to group parameters that are associated with the same feature or theme together for easy organizational access. For example, a parameter group with the name \"Search V2\" may have the `description` \"New mobile search view\" and contain parameters for the new search's layout and font.",
          "additionalProperties": {
            "$ref": "RemoteConfigParameterGroup"
          },
          "type": "object"
        }
      },
      "description": "* A RemoteConfig represents a Remote Config template. A project's Remote Config template is evaluated during each application instance's fetch. Note: Server templates currently support percentage conditions. Publishing a server template with unsupported conditional values will return a validation error. See [Remote Config in Server Environments](https://firebase.google.com/docs/remote-config/server) for more information. The resolved value of a parameter is determined as follows: Given the conditional values that refer to `true` conditions for the application instance, the parameter's resolved value is the conditional value whose name is the earliest in the conditions list. Else, if the parameter has a default value, the resolved value is set to the default value. Else, the parameter has no value and is omitted from the result that the application instance fetches. For example, assume we have parameter key `fruit`, with default value `pear` and conditional value submap `{\"is_ios\": \"apple\", \"is_in_20_percent\": \"banana\"}` where `\"is_ios\"` and `\"is_20_percent\"` are names of conditions in the ordered condition list. The value of `fruit` would evaluate to `apple` if `is_ios` is true. Otherwise, if `is_in_20_percent` is `true`, `fruit` would evaluate to `banana`, and if `is_ios` and `is_in_20_percent` are both false, `fruit` would evaluate to `pear`. If no default value were specified, and `is_ios` and `is_in_20_percent` were both false, no value for `fruit` would be returned from the Remote Config server to the client. Once a project's Remote Config template has been published via a successful UpdateRemoteConfig call, clients can fetch these parameter values and display them to users."
    },
    "ExperimentDescription": {
      "type": "object",
      "id": "ExperimentDescription",
      "properties": {
        "experimentStartTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "When the experiment was started."
        },
        "experimentId": {
          "description": "The Firebase A/B Testing experiment ID. A string of max length 22 characters. Format: _exp_ This is referred to as the tracking id and is different from the experiment id which is used internally by ABT.",
          "type": "string"
        },
        "timeToLiveMillis": {
          "type": "string",
          "description": "How long the experiment can remain in ON state. Valid range from 1 ms to 6 months.",
          "format": "int64"
        },
        "triggerTimeoutMillis": {
          "format": "int64",
          "description": "How long the experiment can remain in STANDBY state. Valid range from 1 ms to 6 months.",
          "type": "string"
        },
        "variantId": {
          "type": "string",
          "description": "The variant of the experiment assigned to the app instance."
        },
        "triggerEvent": {
          "type": "string",
          "description": "The Google Analytics event that activates the experiment."
        }
      },
      "description": "Encapsulates per-experiment data."
    },
    "AndCondition": {
      "id": "AndCondition",
      "description": "---------- Boolean Operators AND of sub-conditions. An AND condition is true if all of its subconditions evaluate to true.",
      "type": "object",
      "properties": {
        "conditions": {
          "type": "array",
          "description": "Evaluated in given order with short circuit of false. Should contain at least one condition and no more than 100 conditions.",
          "items": {
            "$ref": "Condition"
          }
        }
      }
    },
    "PersonalizationValue": {
      "type": "object",
      "description": "Contains the necessary information to fetch a personalized value.",
      "properties": {
        "personalizationId": {
          "type": "string",
          "description": "Identifier that represents a personalization definition. This definition is used to resolve the value at config fetch time. This system-generated value should not be modified."
        }
      },
      "id": "PersonalizationValue"
    },
    "ServerRemoteConfig": {
      "properties": {
        "version": {
          "$ref": "Version",
          "description": "Contains all metadata about a particular version of the server Remote Config template. Note that we are reusing the control plane version proto here."
        },
        "conditions": {
          "items": {
            "$ref": "ServerRemoteConfigCondition"
          },
          "description": "A list of conditions in descending order by priority.",
          "type": "array"
        },
        "parameters": {
          "description": "Map of parameter keys to their optional default values and optional conditional values.",
          "type": "object",
          "additionalProperties": {
            "$ref": "ServerRemoteConfigParameter"
          }
        }
      },
      "type": "object",
      "description": "* A ServerRemoteConfig represents the raw data-plane version of a control plane Remote Config template. This raw template will be evaluated by the Admin SDK (RC Server SDK) to form the config.",
      "id": "ServerRemoteConfig"
    },
    "ServerRemoteConfigParameter": {
      "id": "ServerRemoteConfigParameter",
      "type": "object",
      "description": "A parameter value associated with a parameter key in [google.firebase.remoteconfig.v1.ServerRemoteConfig.parameters]. At minimum, a `default_value` or a `conditional_values` entry should be present for the parameter to have any effect.",
      "properties": {
        "conditionalValues": {
          "additionalProperties": {
            "$ref": "ServerRemoteConfigParameterValue"
          },
          "type": "object",
          "description": "Optional - a (condition name, value) map. The condition_name of the highest priority (the one listed first in the RemoteConfig's conditions list) determines the value of this parameter."
        },
        "defaultValue": {
          "description": "Optional - value to set the parameter to, when none of the named conditions evaluate to true.",
          "$ref": "ServerRemoteConfigParameterValue"
        }
      }
    },
    "RemoteConfigUser": {
      "properties": {
        "name": {
          "description": "Output only. Display name.",
          "type": "string"
        },
        "imageUrl": {
          "type": "string",
          "description": "Output only. Image URL."
        },
        "email": {
          "type": "string",
          "description": "Output only. Email address."
        }
      },
      "id": "RemoteConfigUser",
      "type": "object",
      "description": "All the fields associated with the person/service account that wrote a Remote Config template."
    },
    "RemoteConfigParameterValue": {
      "description": "A RemoteConfigParameterValue resource contains the value that a parameter may have.",
      "properties": {
        "personalizationValue": {
          "$ref": "PersonalizationValue",
          "description": "A dynamic, user-specific value computed when config is fetched."
        },
        "value": {
          "description": "The string value that the parameter is set to.",
          "type": "string"
        },
        "rolloutValue": {
          "$ref": "RolloutValue",
          "description": "A dynamic Rollout value managed by the Firebase ABT Experiment service."
        },
        "useInAppDefault": {
          "type": "boolean",
          "description": "If true, the parameter is omitted from the parameter values returned to a client."
        }
      },
      "type": "object",
      "id": "RemoteConfigParameterValue"
    },
    "HttpBody": {
      "properties": {
        "data": {
          "description": "The HTTP request/response body as raw binary.",
          "type": "string",
          "format": "byte"
        },
        "extensions": {
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            }
          },
          "type": "array",
          "description": "Application specific response metadata. Must be set in the first response for streaming APIs."
        },
        "contentType": {
          "description": "The HTTP Content-Type header value specifying the content type of the body.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Message that represents an arbitrary HTTP body. It should only be used for payload formats that can't be represented as JSON, such as raw binary or an HTML page. This message can be used both in streaming and non-streaming API methods in the request as well as the response. It can be used as a top-level request field, which is convenient if one wants to extract parameters from either the URL or HTTP template into the request fields and also want access to the raw HTTP body. Example: message GetResourceRequest { // A unique request id. string request_id = 1; // The raw HTTP body is bound to this field. google.api.HttpBody http_body = 2; } service ResourceService { rpc GetResource(GetResourceRequest) returns (google.api.HttpBody); rpc UpdateResource(google.api.HttpBody) returns (google.protobuf.Empty); } Example with streaming methods: service CaldavService { rpc GetCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); rpc UpdateCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); } Use of this type only changes how the request and response bodies are handled, all other features will continue to work unchanged.",
      "id": "HttpBody"
    },
    "ListVersionsResponse": {
      "description": "Contains a paginated list of versions of the RemoteConfig.",
      "type": "object",
      "properties": {
        "nextPageToken": {
          "description": "Token to retrieve the next page of results, or empty if there are no more results in the list.",
          "type": "string"
        },
        "versions": {
          "type": "array",
          "items": {
            "$ref": "Version"
          },
          "description": "A list of version metadata objects, sorted in reverse chronological order."
        }
      },
      "id": "ListVersionsResponse"
    },
    "FetchRemoteConfigRequest": {
      "type": "object",
      "id": "FetchRemoteConfigRequest",
      "properties": {
        "analyticsUserProperties": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Optional - List of Analytics user properties.",
          "type": "object"
        },
        "timeZone": {
          "description": "Optional - If omitted and the template has any conditions that depend on timezone, they will be evaluated as false. The timezone id of the device, in Olson Id format, e.g. \"America/Los_Angeles\".",
          "type": "string"
        },
        "appId": {
          "description": "Required. If not specified, fetch will return 400 (Bad Request). GMP App id.",
          "type": "string"
        },
        "appVersion": {
          "type": "string",
          "description": "Optional - If omitted and the template has any conditions that depend on app_version, they will be evaluated as false. App version, using the native app version format on the client's OS. Examples: 0, 123, 0123, 1.2.3, 001.33.043.321.55 ."
        },
        "platformVersion": {
          "type": "string",
          "description": "Optional - If omitted and the template has any conditions that depend on platform version, they will be evaluated as false. The version string of the device, e.g. \"21\" for (Android) Lollipop, or (for iOS) three non-negative, period separated integers, e.g. \"9.0.0\"."
        },
        "appInstanceIdToken": {
          "description": "Required. The instance id token of the app, which is retrieved using the default scope. If specified incorrectly, and if the template has any percentile conditions, they will be evaluated to false. If omitted, fetch can lead to a 400 response code (Bad Request).",
          "type": "string"
        },
        "firstOpenTime": {
          "type": "string",
          "description": "The first time a user launches an app after installing or re-installing it. This value comes from GA, and will not be set if GA SDK is not available on the client or if GA does not have the first-open time value.",
          "format": "google-datetime"
        },
        "packageName": {
          "description": "Optional - If omitted, the project's default package will be fetched. Name of the package for which we are fetching data from. Should match the app name for Android apps, or the corresponding entity (e.g. bundle name) for iOS apps.",
          "type": "string"
        },
        "countryCode": {
          "description": "Optional - If omitted and the template has any conditions that depend on country_code, they will be evaluated as false. Should be 2 lower-case letters, e.g. \"us\", \"tr\", or \"gb\", as defined in ISO 3166-1 alpha-2. This is case-insensitive. See https://www.iso.org/obp/ui/#search .",
          "type": "string"
        },
        "sdkVersion": {
          "type": "string",
          "description": "Optional - Version of the Firebase Remote Config SDK. This number is hard-coded into each client."
        },
        "appBuild": {
          "description": "Optional - If omitted and the template has any conditions that depend on app_build, they will be evaluated as false. * On Android, this is the Version Code, which is a positive integer, e.g., 42. * On iOS, this is the CFBundleVersion, which is a string comprised of three non-negative, period-separated integers with the first integer being greater than zero—for example, 3.1.2. * On Web, the concept of a build number is not well defined, and thus should not be set.",
          "type": "string"
        },
        "languageCode": {
          "type": "string",
          "description": "Optional - If omitted and the template has any conditions that depend on locale, they will be evaluated as false. The default locale of the device, in BCP47 format, for example \"en-US\". This is case-insensitive. See https://www.w3.org/International/core/langtags/rfc3066bis.html ."
        },
        "appInstanceId": {
          "description": "Required. The instance id of the app. If unspecified, fetch will return 400 (Bad Request). Refer to https://firebase.google.com/support/privacy/manage-iids.",
          "type": "string"
        }
      },
      "description": "* A request to render parameter values from the current RemoteConfig template and Firebase A/B Testing experiments."
    },
    "FetchRemoteConfigResponse": {
      "properties": {
        "personalizationMetadata": {
          "description": "A map of Remote Config parameter key to Firebase Personalization related metadata that should be delivered to the particular device making the fetch call.",
          "type": "object",
          "additionalProperties": {
            "$ref": "PersonalizationMetadata"
          }
        },
        "state": {
          "description": "The state of the fetched response.",
          "enumDescriptions": [
            "Default (when the enum is not set by the server for any reason).",
            "The Remote Config parameter values and/or the Firebase A/B Testing experiments differ from the last fetch.",
            "No template defined.",
            "The Remote Config parameter values and Firebase A/B Testing experiments both match those returned during the last fetch.",
            "Template found, but evaluates to empty (e.g. all keys omitted)"
          ],
          "type": "string",
          "enum": [
            "INSTANCE_STATE_UNSPECIFIED",
            "UPDATE",
            "NO_TEMPLATE",
            "NO_CHANGE",
            "EMPTY_CONFIG"
          ]
        },
        "experimentDescriptions": {
          "description": "Firebase A/B Testing experiment configuration and metadata.",
          "items": {
            "$ref": "ExperimentDescription"
          },
          "type": "array"
        },
        "entries": {
          "description": "The Key-Value pairs of the config.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "templateVersion": {
          "format": "int64",
          "description": "Used to record the current template in the response.",
          "type": "string"
        },
        "rolloutMetadata": {
          "items": {
            "$ref": "RolloutMetadata"
          },
          "type": "array",
          "description": "Metadata describing active Remote Config rollouts which are related to parameters delivered via this fetch response."
        },
        "appName": {
          "description": "For Android apps, app_name is the package name of the app. For iOS apps, it is the bundle name.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "FetchRemoteConfigResponse",
      "description": "* The Firebase Remote Config configuration data for an app instance."
    },
    "PercentCondition": {
      "properties": {
        "microPercentRange": {
          "description": "The range of percentiles to target in micro-percents.",
          "$ref": "MicroPercentRange"
        },
        "percentOperator": {
          "type": "string",
          "description": "Required. The choice of percent operator to determine how to compare targets to percent(s).",
          "enum": [
            "UNKNOWN",
            "LESS_OR_EQUAL",
            "GREATER_THAN",
            "BETWEEN"
          ],
          "enumDescriptions": [
            "Per http://go/protodosdonts",
            "Target percentiles less than or equal to the target percent. A condition using this operator must specify micro_percent.",
            "Target percentiles greater than the target percent. A condition using this operator must specify micro_percent.",
            "Target percentiles within an interval defined by a lower bound and an upper bound. The lower bound is an exclusive (open) bound and the micro_percent_range_upper_bound is an inclusive (closed) bound. A condition using this operator must specify micro_percent_range."
          ]
        },
        "microPercent": {
          "type": "integer",
          "description": "Required. The limit of percentiles to target in micro-percents. The value must be in the range [0 and 100000000].",
          "format": "int32"
        },
        "seed": {
          "type": "string",
          "description": "Optional. The seed used when evaluating the hash function to map an instance to a value in the hash space. This is a string which can have 0 - 32 characters and can contain ASCII characters [-_.0-9a-zA-Z]. The string is case-sensitive."
        }
      },
      "description": "---------- Primitive Conditions (Atoms) A condition that compares the instance pseudo-random percentile to a given limit. NOTE: Developers provide an ID via the Admin SDK. This ID is hashed to a random percentile. The function is consistent and repeatable and will give the same result for evaluating an ID for the same condition across different platforms and across time. The function is consistent with the function used for evaluating IDs for client templates.",
      "id": "PercentCondition",
      "type": "object"
    },
    "RemoteConfigParameter": {
      "properties": {
        "defaultValue": {
          "$ref": "RemoteConfigParameterValue",
          "description": "Optional - value to set the parameter to, when none of the named conditions evaluate to `true`."
        },
        "conditionalValues": {
          "type": "object",
          "additionalProperties": {
            "$ref": "RemoteConfigParameterValue"
          },
          "description": "Optional - a (condition name, value) map. The condition_name of the highest priority (the one listed first in the RemoteConfig's conditions list) determines the value of this parameter."
        },
        "valueType": {
          "description": "The data type for all values of this parameter in the current version of the template. Defaults to `ParameterValueType.STRING` if unspecified.",
          "enumDescriptions": [
            "Catch-all for unrecognized enum values.",
            "Represents String values.",
            "Represents Boolean values (\"true\" or \"false\").",
            "Represents both positive and negative integer and float values.",
            "Represents JSON values."
          ],
          "type": "string",
          "enum": [
            "PARAMETER_VALUE_TYPE_UNSPECIFIED",
            "STRING",
            "BOOLEAN",
            "NUMBER",
            "JSON"
          ]
        },
        "description": {
          "description": "Optional. A description for this Parameter. Its length must be less than or equal to 256 characters . A description may contain any Unicode characters.",
          "type": "string"
        }
      },
      "id": "RemoteConfigParameter",
      "description": "A parameter value associated with a parameter key in google.firebase.remoteconfig.v1.RemoteConfig.parameters. At minimum, a `default_value` or a `conditional_values` entry should be present for the parameter to have any effect.",
      "type": "object"
    },
    "Condition": {
      "description": "---------- General Condition Wrapper A general boolean expression that is used to evaluate conditions for server-side Remote Config templates.",
      "type": "object",
      "id": "Condition",
      "properties": {
        "orCondition": {
          "$ref": "OrCondition",
          "description": "Apply logical \"or\" condition to the subset of conditions."
        },
        "customSignal": {
          "description": "/ Target a developer-defined custom signal.",
          "$ref": "CustomSignalCondition"
        },
        "percent": {
          "$ref": "PercentCondition",
          "description": "Builtin conditions (aka 'atoms') Target a percentage of the population (users, app instances)."
        },
        "andCondition": {
          "$ref": "AndCondition",
          "description": "Boolean operators Apply logical \"and\" condition to the subset of conditions."
        }
      }
    },
    "RollbackRemoteConfigRequest": {
      "description": "Replace the published Remote Config template with an earlier version.",
      "id": "RollbackRemoteConfigRequest",
      "type": "object",
      "properties": {
        "versionNumber": {
          "format": "int64",
          "type": "string",
          "description": "Required. The version number of the RemoteConfig to roll back to. The specified version number must be less than the current version number, and not have been deleted due to staleness."
        }
      }
    },
    "OrCondition": {
      "description": "OR of sub-conditions. An OR condition is true if any of its subconditions evaluate to true. If there is an exception evaluating any of its subconditions, that subcondition can be ignored if any other subcondition is true.",
      "id": "OrCondition",
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "Condition"
          },
          "description": "Evaluated in given order with short circuit of true. Should contain at least one condition and no more than 100 conditions."
        }
      },
      "type": "object"
    },
    "CustomSignalCondition": {
      "id": "CustomSignalCondition",
      "properties": {
        "customSignalOperator": {
          "type": "string",
          "enum": [
            "UNKNOWN",
            "NUMERIC_LESS_THAN",
            "NUMERIC_LESS_EQUAL",
            "NUMERIC_EQUAL",
            "NUMERIC_NOT_EQUAL",
            "NUMERIC_GREATER_THAN",
            "NUMERIC_GREATER_EQUAL",
            "STRING_CONTAINS",
            "STRING_DOES_NOT_CONTAIN",
            "STRING_EXACTLY_MATCHES",
            "STRING_CONTAINS_REGEX",
            "SEMANTIC_VERSION_LESS_THAN",
            "SEMANTIC_VERSION_LESS_EQUAL",
            "SEMANTIC_VERSION_EQUAL",
            "SEMANTIC_VERSION_NOT_EQUAL",
            "SEMANTIC_VERSION_GREATER_THAN",
            "SEMANTIC_VERSION_GREATER_EQUAL"
          ],
          "description": "Required. The choice of custom signal operator to determine how to compare targets to actual values.",
          "enumDescriptions": [
            "Per http://go/protodosdonts",
            "The actual value is less than the target value.",
            "The actual value is less than or equal to the target value.",
            "The actual value is equal to the target value.",
            "The actual value is not equal to the target value.",
            "The actual value is greater than the target value.",
            "The actual value is greater than or equal to the target value.",
            "AT LEAST ONE of the target values is a substring of the actual custom signal value. Eg: \"abc\" contains the string \"a\", \"bc\".",
            "NONE of the target values is a substring of the actual custom signal value.",
            "The actual value exactly matches AT LEAST ONE of the target values.",
            "The target regular expression matches a portion of AT LEAST ONE of the actual values (or the entire string). The regex has to be in RE2 format. See https://github.com/google/re2/wiki/Syntax",
            "The actual value is less than the target value.",
            "The actual value is less than or equal to the target value.",
            "The actual value is equal to the target value.",
            "The actual value is not equal to the target value.",
            "The actual value is greater than the target value.",
            "The actual value is greater than or equal to the target value."
          ]
        },
        "customSignalKey": {
          "description": "Required. The custom signal name. This must match what is provided in the EvaluationContext in the Admin SDK.",
          "type": "string"
        },
        "targetCustomSignalValues": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Required. A list of at most 100 target custom signal values. For numeric operators: this list must have exactly ONE target signal value that is of a valid numeric format specified above. For string operators, this is a list of target custom signal values, where each value conforms to the length limits specified above."
        }
      },
      "type": "object",
      "description": "A condition that compares a developer-defined custom signal to a target value. NOTE: Developers provide custom signals via the Admin SDK. These signals can be a string, number, or numeric version (aka semantic version). For numeric interpretation of custom signal values. This will be a numeric value that can have at most 10 digits before and after the decimal point each. For general string interpretation of custom signal values. This will be a string value up to a 100 characters long. For numeric interpretation of semantic versions. The version will be an integer or a set of integers separated by decimal points. Supported format: (1) integer: 123, 50932 etc (2) integer with dots: 1.2, 3.45.2, 0.0.1 etc Unsupported format: any other format, like 1.0.a, v1.2.3, beta-1 etc"
    },
    "Version": {
      "description": "Contains all metadata about a particular version of the Remote Config template. All fields are set at the time the specified Remote Config template was written.",
      "properties": {
        "isLegacy": {
          "description": "Output only. `True` if this Remote Config template was published before version history was supported.",
          "type": "boolean"
        },
        "updateTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Output only. When the Remote Config template was written to the Remote Config server."
        },
        "description": {
          "description": "Optional. The user-provided description of the corresponding Remote Config template",
          "type": "string"
        },
        "versionNumber": {
          "format": "int64",
          "type": "string",
          "description": "Output only. The version number of the version's corresponding Remote Config template."
        },
        "updateType": {
          "type": "string",
          "enumDescriptions": [
            "Catch-all for unrecognized enum values.",
            "A regular incremental update.",
            "A forced update. The ETag was specified as \"*\" in an UpdateRemoteConfigRequest request or the \"Force Update\" button was pressed on the console.",
            "A rollback to a previous Remote Config template."
          ],
          "enum": [
            "REMOTE_CONFIG_UPDATE_TYPE_UNSPECIFIED",
            "INCREMENTAL_UPDATE",
            "FORCED_UPDATE",
            "ROLLBACK"
          ],
          "description": "Output only. What type of update was made."
        },
        "updateOrigin": {
          "enumDescriptions": [
            "Catch-all for unrecognized values.",
            "The update came from the Firebase UI.",
            "The update came from the Remote Config REST API.",
            "This value is used when the update came from the Firebase Admin Node SDK"
          ],
          "type": "string",
          "description": "Output only. Where the update action originated.",
          "enum": [
            "REMOTE_CONFIG_UPDATE_ORIGIN_UNSPECIFIED",
            "CONSOLE",
            "REST_API",
            "ADMIN_SDK_NODE"
          ]
        },
        "updateUser": {
          "$ref": "RemoteConfigUser",
          "description": "Output only. Aggregation of all metadata fields about the account that performed the update."
        },
        "rollbackSource": {
          "description": "Output only. Only present if this version is the result of a rollback, and will be the version number of the Remote Config template that was rolled-back to.",
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object",
      "id": "Version"
    },
    "RolloutMetadata": {
      "properties": {
        "affectedParameterKeys": {
          "type": "array",
          "description": "The parameter keys affected by this rollout.",
          "items": {
            "type": "string"
          }
        },
        "variantId": {
          "type": "string",
          "description": "The variant of the rollout assigned to this instance in this fetch response."
        },
        "rolloutId": {
          "type": "string",
          "description": "The Firebase Remote Config rollout ID uniquely identifying a rollout. This is the tracking ID of the Rollout object defined in ExperimentsEntities."
        }
      },
      "description": "Metadata describing Remote Config rollouts.",
      "id": "RolloutMetadata",
      "type": "object"
    },
    "RolloutValue": {
      "id": "RolloutValue",
      "description": "Information related to a Rollout.",
      "properties": {
        "value": {
          "type": "string",
          "description": "The user-specified value to be rolled out."
        },
        "percent": {
          "description": "The percentage of users that will receive the rollout value.",
          "type": "number",
          "format": "double"
        },
        "rolloutId": {
          "type": "string",
          "description": "The identifier that associates a parameter value to a Rollout experiment."
        }
      },
      "type": "object"
    },
    "RemoteConfigCondition": {
      "description": "A condition targeting a specific group of users. A list of these conditions make up part of a RemoteConfig object.",
      "id": "RemoteConfigCondition",
      "properties": {
        "name": {
          "type": "string",
          "description": "Required. A non-empty and unique name of this condition."
        },
        "expression": {
          "description": "Required. The logic of this condition. See the documentation regarding [Condition Expressions](/docs/remote-config/condition-reference) for the expected syntax of this field.",
          "type": "string"
        },
        "tagColor": {
          "enum": [
            "CONDITION_DISPLAY_COLOR_UNSPECIFIED",
            "BLUE",
            "BROWN",
            "CYAN",
            "DEEP_ORANGE",
            "GREEN",
            "INDIGO",
            "LIME",
            "ORANGE",
            "PINK",
            "PURPLE",
            "TEAL"
          ],
          "description": "Optional. The color associated with this condition for display purposes in the Firebase Console. Not specifying this value or having \"CONDITION_DISPLAY_COLOR_UNSPECIFIED\" results in the Console picking an arbitrary color to associate with the condition.",
          "type": "string",
          "enumDescriptions": [
            "",
            "Blue",
            "Brown",
            "Cyan",
            "aka \"Red Orange\"",
            "Green",
            "Indigo",
            "Lime",
            "Orange",
            "Pink",
            "Purple",
            "Teal"
          ]
        }
      },
      "type": "object"
    }
  },
  "canonicalName": "Firebase Remote Config",
  "fullyEncodeReservedExpansion": true,
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account."
        }
      }
    }
  },
  "ownerName": "Google",
  "description": "The Firebase Remote Config API lets developers change the behavior and appearance of their apps without requiring users to download an app update. It is an alternative to, but can be used in tandem with, the Firebase console at https://console.firebase.google.com.",
  "servicePath": "",
  "kind": "discovery#restDescription",
  "parameters": {
    "upload_protocol": {
      "location": "query",
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
    },
    "alt": {
      "default": "json",
      "type": "string",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "location": "query",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "description": "Data format for response."
    },
    "$.xgafv": {
      "enum": [
        "1",
        "2"
      ],
      "description": "V1 error format.",
      "location": "query",
      "type": "string",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ]
    },
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query",
      "type": "string"
    },
    "oauth_token": {
      "location": "query",
      "description": "OAuth 2.0 token for the current user.",
      "type": "string"
    },
    "key": {
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query"
    },
    "fields": {
      "location": "query",
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response."
    },
    "prettyPrint": {
      "type": "boolean",
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "location": "query"
    },
    "access_token": {
      "type": "string",
      "location": "query",
      "description": "OAuth access token."
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "callback": {
      "description": "JSONP",
      "location": "query",
      "type": "string"
    }
  },
  "basePath": "",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "name": "firebaseremoteconfig",
  "discoveryVersion": "v1",
  "ownerDomain": "google.com",
  "documentationLink": "https://firebase.google.com/docs/remote-config/use-config-rest",
  "version_module": true,
  "revision": "20241219",
  "protocol": "rest",
  "mtlsRootUrl": "https://firebaseremoteconfig.mtls.googleapis.com/",
  "title": "Firebase Remote Config API",
  "rootUrl": "https://firebaseremoteconfig.googleapis.com/",
  "baseUrl": "https://firebaseremoteconfig.googleapis.com/",
  "version": "v1",
  "batchPath": "batch"
}
